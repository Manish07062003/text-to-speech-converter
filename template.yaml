AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: Api
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /file:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListFiles.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateNewFile.Arn}/invocations
              responses: {}
          /file/{id}:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteFile.Arn}/invocations
              responses: {}
          /voices:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetVoices.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-Table
  FrontEnd:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend
      WebsiteConfiguration:
        IndexDocument: index.html
  FileStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-filestore
  CreateNewFile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateNewFile
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CreateNewFile
      CodeUri: src/CreateNewFile
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 300
      Tracing: Active
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: !Join
                - ''
                - - !GetAtt FileStore.Arn
                  - /*
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: !GetAtt Table.Arn
              Action:
                - dynamodb:UpdateItem
                - dynamodb:PutItem
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - polly:SynthesizeSpeech
        - AWSXrayWriteOnlyAccess
      Events:
        ApiPOSTfile:
          Type: Api
          Properties:
            Path: /file
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          TABLE_ARN: !GetAtt Table.Arn
          BUCKET_NAME: !Ref FileStore
          BUCKET_ARN: !GetAtt FileStore.Arn
  DeleteFile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteFile
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: DeleteFile
      CodeUri: src/DeleteFile
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 45
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref FileStore
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: !GetAtt Table.Arn
              Action:
                - dynamodb:GetItem
                - dynamodb:DeleteItem
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: !Join
                - ''
                - - !GetAtt FileStore.Arn
                  - /*
              Action:
                - s3:DeleteObject
      Events:
        ApiDELETEfileid:
          Type: Api
          Properties:
            Path: /file/{id}
            Method: DELETE
            RestApiId: !Ref Api
      Environment:
        Variables:
          BUCKET_NAME: !Ref FileStore
          BUCKET_ARN: !GetAtt FileStore.Arn
          TABLE_NAME: !Ref Table
          TABLE_ARN: !GetAtt Table.Arn
  GetVoices:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetVoices
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetVoices
      CodeUri: src/GetVoices
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 60
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - polly:DescribeVoices
      Events:
        ApiGETvoices:
          Type: Api
          Properties:
            Path: /voices
            Method: GET
            RestApiId: !Ref Api
  ListFiles:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ListFiles
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ListFiles
      CodeUri: src/ListFiles
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: !GetAtt Table.Arn
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
      Events:
        ApiGETfile:
          Type: Api
          Properties:
            Path: /file
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          TABLE_ARN: !GetAtt Table.Arn
  Website:
    Type: AWS::CodeBuild::Project
    Metadata:
      StackeryType: website
    DependsOn: WebsiteRole
    Properties:
      Name: !Sub ${AWS::StackName}-Website
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: API_URL
            Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Api.Stage}
      ServiceRole: !GetAtt WebsiteRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub
          - |-
            version: 0.2
            phases:
              install:
                runtime-versions:
                  nodejs: latest
                  python: latest
                  ruby: latest
                commands:
                  - |
                    _SOURCE_LOCATION=${SourceLocation}
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      git clone ${SourceLocation} repo
                      cd repo
                      git checkout ${SourceVersion}
                    else
                      aws s3 cp ${SourceLocation} repo.tgz
                      tar --strip-components 1 -xvvzf repo.tgz
                    fi
                  - cd ${SourceDirectory}
              pre_build:
                commands:
                  - |
                    if [ ! -f yarn.lock -a -f package.json ]; then
                      npm install --production
                    elif [ -f yarn.lock -a -f package.json ]; then
                      yarn install --production
                    elif [ -f requirements.txt ]; then
                      pip install -r requirements.txt
                    elif [ -f Gemfile ]; then
                      bundle install
                    fi
              build:
                commands:
                  - ${BuildCommand}
              post_build:
                commands:
                  - |
                    _SOURCE_LOCATION=${SourceLocation}
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      cd "${!CODEBUILD_SRC_DIR}/repo"
                    else
                      cd ${!CODEBUILD_SRC_DIR}
                    fi
                  - aws s3 sync '${PublishDirectory}' 's3://${DestinationBucketName}' --acl public-read --cache-control 'max-age=0, must-revalidate, public' --no-progress --delete
          - PublishDirectory: src/frontend/build
            BuildCommand: npm run production
            SourceDirectory: src/frontend
            DestinationBucketName: !Ref FrontEnd
      Tags:
        - Key: Stackery Project Type
          Value: Website Builder
  WebsiteEvents:
    Type: AWS::Events::Rule
    DependsOn: Website
    Properties:
      Name: !Sub ${SourceVersion}-stackerywebsite
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
            - FAILED
            - FAULT
            - STOPPPED
            - TIMED_OUT
          project-name:
            - !Ref Website
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
          Id: !Ref SourceVersion
  WebsiteEventsPermission:
    Type: AWS::Lambda::Permission
    DependsOn: WebsiteEvents
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WebsiteEvents.Arn
  WebsiteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-Website
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Website:log-stream:*
        - PolicyName: DownloadSourceFromStackeryAssetsBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::stackery-assetsbucket-*/*
        - PolicyName: UploadToDestinationObjectStore
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub ${FrontEnd.Arn}/*
                  - !Sub ${FrontEnd.Arn}
  WebsiteBuildTrigger:
    Type: Custom::StackeryWebsiteBuildTrigger
    DependsOn: WebsiteEvents
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: website
      ProjectName: !Ref Website
      SourceVersion: !Ref SourceVersion
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  SourceLocation:
    Type: String
    Description: Location of source code for deployment (injected by Stackery at deployment time)
  SourceVersion:
    Type: String
    Description: Source version for deployment (injected by Stackery at deployment time)